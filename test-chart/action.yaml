name: test-chart
description: Performs chart tests using https://github.com/silphid/testchart, if any present in `tests` sub-dir of chart.

inputs:

  work-dir:
    description: >
      Optional location where to perform operation. Defaults to workspace.
    required: false
    default: "."

  namespace:
    description: >
      Optional name of namespace to use for rendering chart (default "my-namespace").
    required: false
    default: my-namespace
  
  release:
    description: >
      Optional name of release to use for rendering chart (default "my-release").
    required: false
    default: my-release
  
  path:
    description: >
      Optional path to tests directory relative to chart's root directory (default "tests").
    required: false
    default: tests

  ignore:
    description: >
      Optional regex specifying lines to ignore. Multiple ignore patterns can be passed
      as a multi-line value, with one pattern per line.
    required: false
    default: ""

runs:
  using: 'composite'

  steps:
    - name: Determine latest version of testchart
      id: get-version
      shell: bash
      run: |
        VERSION=$(curl -s https://api.github.com/repos/silphid/testchart/releases/latest | grep tag_name | cut -d '"' -f 4 | sed 's/^v//')
        echo "Latest version of testchart is v$VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Perform chart tests
      shell: bash
      run: |
        cd ${{ inputs.work-dir }}
        if [ -d "${{ inputs.path }}" ]; then

          # Install testchart
          BIN_DIR=$HOME/bin
          mkdir -p $BIN_DIR
          VERSION=${{ steps.get-version.outputs.version }}
          curl -sLo $BIN_DIR/testchart.tar.gz https://github.com/silphid/testchart/releases/download/v$VERSION/testchart_${VERSION}_linux_amd64.tar.gz
          tar xvzf $BIN_DIR/testchart.tar.gz -C $BIN_DIR

          # Build testchart command
          command="$BIN_DIR/testchart run \
            --namespace ${{ inputs.namespace }} \
            --release ${{ inputs.release }} \
            --path ${{ inputs.path }} \
            --show-values ${{ inputs.show-values }}"

          # Add ignore patterns passed as a multi-line string, if any
          while IFS= read -r line; do
            command+=" --ignore '$line'"
          done <<< "${{ inputs.ignore }}}"

          # Run testchart
          eval "$command"

        else
          echo "No ${{ inputs.path }} sub-directory found in chart"
        fi
